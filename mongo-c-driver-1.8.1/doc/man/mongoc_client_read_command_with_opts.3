.\" Man page generated from reStructuredText.
.
.TH "MONGOC_CLIENT_READ_COMMAND_WITH_OPTS" "3" "Oct 11, 2017" "1.8.1" "MongoDB C Driver"
.SH NAME
mongoc_client_read_command_with_opts \- mongoc_client_read_command_with_opts()
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH SYNOPSIS
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
bool
mongoc_client_read_command_with_opts (mongoc_client_t *client,
                                      const char *db_name,
                                      const bson_t *command,
                                      const mongoc_read_prefs_t *read_prefs,
                                      const bson_t *opts,
                                      bson_t *reply,
                                      bson_error_t *error);
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Execute a command on the server, applying logic that is specific to commands that read, and taking the MongoDB server version into account. To send a raw command to the server without any of this logic, use \fBmongoc_client_command_simple\fP\&.
.sp
Use this function for commands that read such as “count” or “distinct”. Read concern is applied from \fBopts\fP or else from \fBclient\fP\&. Collation is applied from \fBopts\fP (see example below). Read concern and collation both require MongoDB 3.2 or later, otherwise an error is returned. Read preferences are applied from \fBread_prefs\fP or else from \fBclient\fP\&. No write concern is applied.
.sp
To target a specific server, include an integer “serverId” field in \fBopts\fP with an id obtained first by calling \fBmongoc_client_select_server\fP, then \fBmongoc_server_description_id\fP on its return value.
.sp
\fBreply\fP is always initialized, and must be freed with \fI\%bson_destroy()\fP\&.
.SH PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBclient\fP: A \fBmongoc_client_t\fP\&.
.IP \(bu 2
\fBdb_name\fP: The name of the database to run the command on.
.IP \(bu 2
\fBcommand\fP: A \fI\%bson_t\fP containing the command specification.
.IP \(bu 2
\fBread_prefs\fP: An optional \fBmongoc_read_prefs_t\fP\&.
.IP \(bu 2
\fBopts\fP: A \fI\%bson_t\fP containing additional options.
.IP \(bu 2
\fBreply\fP: A location for the resulting document.
.IP \(bu 2
\fBerror\fP: An optional location for a \fBbson_error_t\fP or \fBNULL\fP\&.
.UNINDENT
.SH ERRORS
.sp
Errors are propagated via the \fBerror\fP parameter.
.SH RETURNS
.sp
Returns \fBtrue\fP if successful. Returns \fBfalse\fP and sets \fBerror\fP if there are invalid arguments or a server or network error.
.SH EXAMPLE
example\-command\-with\-opts.c.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
/*

Demonstrates how to prepare options for mongoc_client_read_command_with_opts and
mongoc_client_write_command_with_opts. First it calls "cloneCollectionAsCapped"
command with "writeConcern" option, then "distinct" command with "collation" and
"readConcern" options,

Start a MongoDB 3.4 replica set with \-\-enableMajorityReadConcern and insert two
documents:

$ mongo
MongoDB Enterprise replset:PRIMARY> db.my_collection.insert({x: 1, y: "One"})
WriteResult({ "nInserted" : 1 })
MongoDB Enterprise replset:PRIMARY> db.my_collection.insert({x: 2, y: "Two"})
WriteResult({ "nInserted" : 1 })

Build and run the example:

gcc example\-command\-with\-opts.c \-o example\-command\-with\-opts $(pkg\-config
\-\-cflags \-\-libs libmongoc\-1.0)
\&./example\-command\-with\-opts [CONNECTION_STRING]
cloneCollectionAsCapped: { "ok" : 1 }
distinct: { "values" : [ 1, 2 ], "ok" : 1 }

*/

#include <mongoc.h>
#include <stdio.h>
#include <stdlib.h>

int
main (int argc, char *argv[])
{
   mongoc_client_t *client;
   const char *uristr = "mongodb://127.0.0.1/?appname=client\-example";
   bson_t *cmd;
   bson_t *opts;
   mongoc_write_concern_t *write_concern;
   mongoc_read_prefs_t *read_prefs;
   mongoc_read_concern_t *read_concern;
   bson_t reply;
   bson_error_t error;
   char *json;

   mongoc_init ();

   if (argc > 1) {
      uristr = argv[1];
   }

   client = mongoc_client_new (uristr);

   if (!client) {
      fprintf (stderr, "Failed to parse URI.\en");
      return EXIT_FAILURE;
   }

   mongoc_client_set_error_api (client, 2);

   cmd = BCON_NEW ("cloneCollectionAsCapped",
                   BCON_UTF8 ("my_collection"),
                   "toCollection",
                   BCON_UTF8 ("my_capped_collection"),
                   "size",
                   BCON_INT64 (1024 * 1024));

   /* include write concern "majority" in command options */
   write_concern = mongoc_write_concern_new ();
   mongoc_write_concern_set_wmajority (write_concern, 10000 /* wtimeoutMS */);
   opts = bson_new ();
   mongoc_write_concern_append (write_concern, opts);

   if (mongoc_client_write_command_with_opts (
          client, "test", cmd, opts, &reply, &error)) {
      json = bson_as_canonical_extended_json (&reply, NULL);
      printf ("cloneCollectionAsCapped: %s\en", json);
      bson_free (json);
   } else {
      fprintf (stderr, "cloneCollectionAsCapped: %s\en", error.message);
   }

   bson_free (cmd);
   bson_free (opts);

   /* distinct values of "x" in "my_collection" where "y" sorts after "one" */
   cmd = BCON_NEW ("distinct",
                   BCON_UTF8 ("my_collection"),
                   "key",
                   BCON_UTF8 ("x"),
                   "query",
                   "{",
                   "y",
                   "{",
                   "$gt",
                   BCON_UTF8 ("one"),
                   "}",
                   "}");

   read_prefs = mongoc_read_prefs_new (MONGOC_READ_SECONDARY);

   /* "One" normally sorts before "one"; make "One" sort after "one" */
   opts = BCON_NEW ("collation",
                    "{",
                    "locale",
                    BCON_UTF8 ("en_US"),
                    "caseFirst",
                    BCON_UTF8 ("lower"),
                    "}");

   /* add a read concern to "opts" */
   read_concern = mongoc_read_concern_new ();
   mongoc_read_concern_set_level (read_concern,
                                  MONGOC_READ_CONCERN_LEVEL_MAJORITY);

   mongoc_read_concern_append (read_concern, opts);

   if (mongoc_client_read_command_with_opts (
          client, "test", cmd, read_prefs, opts, &reply, &error)) {
      json = bson_as_canonical_extended_json (&reply, NULL);
      printf ("distinct: %s\en", json);
      bson_free (json);
   } else {
      fprintf (stderr, "distinct: %s\en", error.message);
   }

   bson_destroy (cmd);
   bson_destroy (opts);
   bson_destroy (&reply);
   mongoc_read_prefs_destroy (read_prefs);
   mongoc_read_concern_destroy (read_concern);
   mongoc_write_concern_destroy (write_concern);
   mongoc_client_destroy (client);

   mongoc_cleanup ();

   return EXIT_SUCCESS;
}

.ft P
.fi
.UNINDENT
.UNINDENT
.SH AUTHOR
MongoDB, Inc
.SH COPYRIGHT
2017, MongoDB, Inc
.\" Generated by docutils manpage writer.
.
